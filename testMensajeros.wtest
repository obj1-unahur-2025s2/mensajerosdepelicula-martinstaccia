import destinos.*
import mensajeros.*
import paquetes.*
import empresa.*


describe "Test de ejercicios mensajeros - Roberto puede llevar el paquete a brooklyn que esta pago en camion"{
    test "Roberto puede llevar un paquete pago en camnio con un acoplado"{
        roberto.cambiarVehiculo(camion)
        camion.setearAcoplados(1)
        paquete.registrarPago()
        paquete.cambiarDestino(brooklyn)
        assert.that(paquete.puedeSerEntregado(roberto))
    }
}


describe "Test de ejercicios mensajeros - Roberto no puede llevar el paquete a brooklyn que esta pago en camion"{
    test "Roberto puede llevar un paquete pago en camnio con un acoplado"{
        roberto.cambiarVehiculo(camion)
        camion.setearAcoplados(1)
        paquete.registrarPago()
        assert.notThat(paquete.puedeSerEntregado(roberto))
    }
 test "Neo no puede entregarlo"{
        assert.notThat(paquete.puedeSerEntregado(neo))
    }

}


describe "Test de ejercicios mensajeros - Test de colecciones sobre mensajeros"{
    test "Se puede contratar a roberto"{
        empresa.contratar(roberto)
        assert.that(empresa.mensajeros().contains(roberto))
    }

    test "Roberto esta en la lista de mensajeros"{
        empresa.contratar(roberto)
        assert.equals([roberto],empresa.mensajeros())
    }

     test "Se puede despedir a robert"{
        empresa.contratar(roberto)
        empresa.contratar(neo)
        empresa.despedir(roberto)
        assert.notThat(empresa.mensajeros().contains(roberto))
    }

    test "Se puede despedir a todos"{
        empresa.contratar(roberto)
        empresa.contratar(neo)
        empresa.despedirATodos()
        assert.that(empresa.mensajeros().isEmpty())
    }

    test "Se envia paquete porque neo puede entrar a la matrix"{
       paquete.registrarPago()
       empresa.contratar(neo)
       empresa.enviarPaquete(paquete)
       assert.that(empresa.paquetesEnviados().contains(paquete))
    }

    test "No se envia paquete porque roberto no puede entrar a la matrix"{
       paquete.registrarPago()
       empresa.contratar(roberto)
       empresa.enviarPaquete(paquete)
       assert.notThat(empresa.paquetesEnviados().contains(paquete))
       assert.that(empresa.paquetesPendientes().contains(paquete))
    }

    test "La empresa no es grande si solo tiene a roberto y neo"{
        empresa.contratar(neo)
        empresa.contratar(roberto)
        assert.notThat(empresa.esGrande())
    }

    test "La empresa es grande porque tiene a roberto, chuck y neo"{
       empresa.contratar(neo)
       empresa.contratar(chuck)
       empresa.contratar(roberto)
       assert.that(empresa.esGrande())
    }

    test "Paquete pago se puede entregar porque neo es el primer contratado"{
       empresa.contratar(neo)
       empresa.contratar(chuck)
       empresa.contratar(roberto)
       assert.that(empresa.sePuedeEntregarPaquetePorPrimerEmpleado(paquete))
    }

    test "Paquete pago no se puede entregar porque roberto es el primer contratado"{
       empresa.contratar(roberto)
       empresa.contratar(neo)
       empresa.contratar(chuck)
       assert.notThat(empresa.sePuedeEntregarPaquetePorPrimerEmpleado(paquete))
    }

    test "paqueton esta parcialmente pago no se puede entregar"{
       empresa.contratar(neo)
       empresa.contratar(chuck)
       empresa.contratar(roberto)
       paqueton.agregarDestino(matrix)
       paqueton.agregarDestino(brooklyn)
       paqueton.recibirPago(100)
       assert.notThat(empresa.sePuedeEntregarPaquetePorPrimerEmpleado(paqueton))
    }

    test "paqueton esta totalmente pago no se puede entregar"{
       empresa.contratar(neo)
       empresa.contratar(chuck)
       empresa.contratar(roberto)
       paqueton.agregarDestino(matrix)
       paqueton.agregarDestino(brooklyn)
       paqueton.recibirPago(100)
       paqueton.recibirPago(100)
       assert.that(empresa.sePuedeEntregarPaquetePorPrimerEmpleado(paqueton))
    }

}